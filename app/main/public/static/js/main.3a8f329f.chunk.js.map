{"version":3,"sources":["pages/ChatsPage.tsx","util/index.ts","store/socket/actions/index.ts","store/user/actions/index.ts","store/user/models/User.ts","store/user/reducer/index.ts","components/shared/ErrorToaster.tsx","pages/LoginPage.tsx","store/static/models/LanguageDifficulty.ts","components/registration/UserBasicData.tsx","components/registration/LanguageSelectItem.tsx","pages/RegisterPage.tsx","components/registration/LanguageSelect.tsx","components/registration/TagSelect.tsx","store/static/actions/index.ts","store/message/models/Message.ts","util/ProtectedRoute.tsx","store/message/actions/index.ts","pages/ChatPage.tsx","store/events/actions/index.ts","pages/EventsPage.tsx","pages/EventPage.tsx","pages/EventCreatePage.tsx","App.tsx","serviceWorker.ts","store/socket/middlewares/socket.ts","store/socket/middlewares/index.ts","store/message/reducer/index.ts","store/socket/reducer/index.ts","store/static/reducer/index.ts","store/events/reducer/index.ts","store/index.ts","index.tsx"],"names":["ChatsPage","props","state","className","this","activeUsers","filter","u","id","toString","currentUser","map","key","to","src","alt","renderActiveUsers","React","Component","connect","users","current","dispatch","makeRequest","url","options","fetch","credentials","then","response","status","split","json","result","Promise","reject","CONNECTION_CHANGED","PORT_CHANGED","connectSocketAction","type","registerUserAction","full_name","email","password","method","headers","body","JSON","stringify","data","USER_CREATED","catch","AuthType","USER_CURRENT_AUTHENTICATED","USER_CURRENT_NOT_AUTHENTICATED","USERS_ACTIVE_RECEIVED","USERS_KNOWN_RECEIVED","USERS_RECOMMENDED_RECEIVED","USER_LOGIN_STATUS_CHANGED","UserStatus","UserCreationStatus","ErrorToaster","toaster","refHandlers","ref","autoFocus","canEscapeKeyClear","position","Position","TOP","renderToastIfAny","bind","addToast","message","toast","intent","Intent","DANGER","timeout","show","prevProps","prevState","snapshot","toasts","length","shift","LoginPage","emailInput","passwordInput","termsAccepted","errors","loginWithFacebook","loginWithGoogle","handleEmailInputChange","handlePasswordInputChange","handleLoginSubmit","handleAcceptChange","event","setState","target","value","preventDefault","loginUser","loginUserWithThirdParty","name","accessToken","T_FACEBOOK","profileObj","T_GOOGLE","registrationFinished","clientId","buttonText","autoLoad","onSuccess","onFailure","cookiePolicy","appId","fields","icon","cssClass","textButton","onClick","callback","onSubmit","disabled","large","placeholder","onChange","label","SUCCESS","text","redirectToSignUp","registration_finished","user","err","console","log","loginUserAction","access_token","auth_type","loginUserWithThirdPartyAction","INITIAL_STATE","currentUserAuthenticated","Initial","knownUsers","recommendedUsers","userCreationStatus","userReducer","LanguageDifficulty","reduced","action","LoggedIn","NotLoggedIn","userLoginStatus","UserCreated","UserBasicData","fullNameInput","passwordRepeatInput","profilePicture","profilePicturePreviewUrl","handleFullNameInputChange","handlePasswordRepeatInputChange","renderProfilePicturePreview","handleRegistrationSubmit","handleProfilePictureInputChange","files","URL","createObjectURL","registerUser","nextClick","onInputChange","renderNextButton","LanguageSelectItem","selectValue","Beginner","onSelectChange","onItemStateChange","renderSelect","updateLanguageDifficulty","language","withDifficulty","d","isSelected","removeLanguage","addLanguage","Advanced","Expert","round","interactive","NONE","RegistrationStep","LanguageSelect","selectedLanguages","isLanguageSelected","submitLanguages","renderLanguages","selectLanguage","updateDifficulty","forEach","l","push","languages","findIndex","_","remove","title","style","static","TagSelect","selectedTags","submitTags","renderTags","tags","tag","selectTag","LANGUAGES_GET","TOPICS_GET","LEARNING_GOALS_GET","MessageType","RegisterPage","currentRegistrationStep","UserNativeLanguages","userPreferences","nativeLanguages","fluentLanguages","goalLanguages","topicsLiked","learningGoals","submitUserBasicData","submitUserPreferences","loadStatic","username","setUserPreferences","handleUserBasicDataSubmission","UserFluentLanguages","UserGoalLanguages","UserTopicsLiked","topics","UserGoals","learning_goals","renderRegistrationComponent","error","preferences","userPreferencesPostAction","ProtectedRoute","component","condition","redirectUrl","rest","render","MESSAGES_GET","MESSAGE_SENT","MESSAGE_RECEIVED","messageSendAction","ChatPage","fileInput","chatRecipient","match","params","inputMessage","handleInputMessageChange","handleInputMessageSubmit","handleInputImageSubmit","renderTextMessage","renderImageMessage","sendTextMessage","fileToUpload","sendImageMessage","messagesWithRecipient","messages","sortBy","Date","sent_at","msg","sender_id","Math","random","getMessagesWithRecipient","message_type","TEXT","click","element","rightElement","IconNames","CIRCLE_ARROW_RIGHT","minimal","onKeyPress","from","target_id","file","FormData","append","IMAGE","sendImageMessageAction","EVENT_GET","EVENTS_GET","EVENTS_USER_GOING_GET","EVENTS_USER_CREATED_GET","EVENT_CREATED","EventsPage","getEventsAll","getEventsUserCreated","getEventsGoing","events","eventsUserGoing","renderUserCreatedEvents","renderUserGoingEvents","renderAllEvents","eventsUserCreated","EventPage","loadEvent","Number","joinEvent","renderEvent","ownProps","find","e","eventGetAction","eventId","userJoinEventAction","EventCreatePage","date","public","location","details","cover_photo","handleNameInputChange","handleEventVisibilityInputChange","handleLocationInputChange","handleDetailsInputChange","handleEventCreationSubmit","handleCoverInputChange","createEvent","eventCreationStatus","created","checked","redirectIfEventCreated","eventCreateAction","history","createBrowserHistory","App","getCurrentUser","isUserLoggedIn","exact","path","isUserAuthenticated","renderBasedOnUserAuthentication","jwt_user","Cookies","get","parsedUser","parse","res","Boolean","window","hostname","Socket","onSocketError","onMessage","onUpdateClient","port","socket","host","io","on","onConnected","onDisconnected","onError","sendIdent","emit","sendIm","disconnect","close","socketMiddleware","store","isConnected","connected","isError","connectionChangedAction","messageReceivedAction","next","getState","messageReducer","Object","assign","_messagesToRecipient","_messagesFromRecipient","socketReducer","staticReducer","eventsReducer","index","rootReducer","combineReducers","messagesReducer","ReactDOM","initialState","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a8f329f.chunk.js","sourcesContent":["import React, {Dispatch} from \"react\";\nimport {connect} from \"react-redux\";\nimport {User} from \"../store/user/models/User\";\nimport {Link, NavLink} from \"react-router-dom\";\nimport {Divider, Icon, IconName, Intent, Tag} from \"@blueprintjs/core\";\nimport {IconNames} from \"@blueprintjs/icons\";\n\nclass ChatsPage extends React.Component<any, any> {\n    constructor(props: any){\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount(): void {\n    }\n\n    renderActiveUsers() {\n        return (\n            <div className={'tan-chat-active'}>\n                {this.props\n                    .activeUsers\n                    .filter((u: User) => u.id.toString() !== this.props.currentUser.id.toString())\n                    .map((u: User) => {\n                        return (\n                            <div className={'tan-chat-active-item'}>\n                                <Link\n                                    key={u.id}\n                                    to={'/chat/' + u.id}>\n                                    <img\n                                        src=\"https://assets.teenvogue.com/photos/5d7bedd9eb2d250008cbc0c6/master/pass/tout.jpg\"\n                                        alt=\"r_photo\"/>\n                                </Link>\n                                <span className={\"tan-chat-active-item-dot\"}> </span>\n                            </div>)\n                    })\n                }\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>ChatsPage</h1>\n\n                <div className={'tan-chat-recommendation'}>\n                    <div className={'tan-chat-recommendation-item'}>\n                        <img\n                            src=\"https://assets.teenvogue.com/photos/5d7bedd9eb2d250008cbc0c6/master/pass/tout.jpg\"\n                            alt=\"r_photo\"/>\n\n                        <span>Alicia Jackson</span>\n                    </div>\n                </div>\n                \n                {this.renderActiveUsers()}\n\n\n                <NavLink to=\"/chat\"> --Chats </NavLink>\n                <NavLink to=\"/event\"> --Events </NavLink>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state: any) => {\n    return {\n        currentUser: state.users.current,\n        activeUsers: state.users.activeUsers\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n    return {\n\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatsPage);\n\n","import React, {Component} from \"react\";\n\nexport function makeRequest(url: string, options: any) {\n    return fetch( `http://127.0.0.1:5000/api${url}`, {...options, credentials: \"include\"})\n        .then(response => {\n            if(response.status.toString().split('')[0] === '4') {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n}\n\n","export const CONNECTION_CHANGED = 'CONNECTION_CHANGED';\nexport const PORT_CHANGED = 'PORT_CHANGED';\nexport const CONNECT_SOCKET = 'CONNECT_SOCKET';\nexport const DISCONNECT_SOCKET = 'DISCONNECT_SOCKET';\n\nexport const connectionChangedAction = (isConnected: boolean) => {\n    return {\n        type: CONNECTION_CHANGED,\n        connected: isConnected,\n        isError: false\n    };\n};\n\nexport const portChangedAction = (port: number) => {\n    return {\n        type: PORT_CHANGED,\n        port: port\n    };\n};\n\nexport const connectSocketAction = () => {\n    return {\n        type: CONNECT_SOCKET\n    };\n};\n\nexport const disconnectSocketAction = () => {\n    return {\n        type: DISCONNECT_SOCKET\n    };\n};\n","import {Dispatch} from \"redux\";\nimport Cookies from 'js-cookie';\nimport {makeRequest} from \"../../../util\";\nimport {connectSocketAction} from \"../../socket/actions\";\nimport {AuthType} from \"../models/User\";\n\nexport function getCurrentUserAction() {\n    return function(dispatch: Dispatch<any>) {\n        const jwt_user = Cookies.get('jwt_user');\n        if(jwt_user) {\n            let parsedUser = JSON.parse(jwt_user as string);\n            parsedUser.id = parsedUser.id.toString();\n\n            return dispatch({\n                type: USER_CURRENT_AUTHENTICATED,\n                user: parsedUser\n            });\n        }\n\n        makeRequest('/user/me', {})\n            .then(data => {\n                return dispatch({\n                    type: USER_CURRENT_AUTHENTICATED,\n                    user: data.user\n                });\n            })\n            .catch((res) => {\n                return dispatch({\n                    type: USER_CURRENT_NOT_AUTHENTICATED,\n                });\n            });\n    }\n}\n\nexport function registerUserAction(full_name: string, email: string, password: string){\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/user/',\n            {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({full_name, email, password})\n            })\n            .then(data => {\n                return dispatch({\n                    type: USER_CREATED,\n                    status: data\n                });\n            })\n            .catch(data => {\n\n                ///???\n\n            });\n    };\n}\n\nexport function loginUserAction(email: string, password: string) {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/user/login',\n        {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({email, password})\n            })\n            .then(data => {\n                return dispatch({\n                    type: USER_CURRENT_AUTHENTICATED,\n                    user: data\n                });\n            })\n            .catch(err => {\n                console.log(err)\n            });\n    };\n}\n\nexport function loginUserWithThirdPartyAction(email: string, full_name: string, access_token: string, auth_type: AuthType) {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/user/third-party',\n            {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({email, full_name, access_token, auth_type})\n            })\n            .then(data => {\n                dispatch({\n                    type: USER_CURRENT_AUTHENTICATED,\n                    user: data\n                });\n                return dispatch(connectSocketAction());\n            })\n            .catch(err => {\n                console.log(err)\n            });\n    };\n}\n\n\nexport function userPreferencesPostAction(preferences: any) {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/user/preferences',\n            {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({...preferences})\n            })\n            .then(data => {\n                return dispatch({\n                    type: USER_CURRENT_AUTHENTICATED,\n                    user: data\n                });\n            })\n            .catch(err => {\n                console.log(err)\n            });\n    };\n}\n\n\n\nexport function getActiveUsersList() {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/user/active', {})\n            .then(users => {\n                return dispatch({\n                    type: USERS_ACTIVE_RECEIVED,\n                    users: users.users\n                })\n            })\n            .catch(err => console.log(\"Err fetching active users\"));\n    }\n}\n\nexport function getKnownUsersList() {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/getKnowUsers/', {})\n            .then(users => {\n                return dispatch({\n                    type: USERS_KNOWN_RECEIVED,\n                    users\n                })\n            })\n            .catch(err => console.log(\"Err fetching known users\"));\n    }\n}\n\nexport function getRecommendedUsersList() {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/getRecommendedUsers/', {})\n            .then(users => {\n                return dispatch({\n                    type: USERS_KNOWN_RECEIVED,\n                    users\n                })\n            })\n            .catch(err => console.log(\"Err fetching recommended users\"));\n    }\n}\n\nexport const USER_CURRENT_AUTHENTICATED = 'USER_CURRENT_AUTHENTICATED';\nexport const USER_CURRENT_NOT_AUTHENTICATED = 'USER_CURRENT_NOT_AUTHENTICATED';\nexport const USERS_ACTIVE_RECEIVED = 'USERS_ACTIVE_RECEIVED';\nexport const USERS_KNOWN_RECEIVED = 'USERS_KNOWN_RECEIVED';\nexport const USERS_RECOMMENDED_RECEIVED = 'USERS_RECOMMENDED_RECEIVED';\nexport const USER_REGISTRATION_STATUS_CHANGED = 'USER_REGISTRATION_STATUS_CHANGED';\nexport const USER_LOGIN_STATUS_CHANGED = 'USER_LOGIN_STATUS_CHANGED';\nexport const USER_CREATED = 'USER_CREATED';\n","interface BaseUser {\n    full_name: string;\n    email: string;\n    registration_finished: boolean;\n}\n\nexport interface User extends BaseUser{\n    id: string;\n    profile_pic_url: string;\n}\n\nexport interface ThirdPartyUser extends BaseUser{\n    access_token: string;\n    auth_type: AuthType;\n}\n\n\nexport enum AuthType {\n    PASSWORD='PASSWORD',\n    T_FACEBOOK='T_FACEBOOK',\n    T_GOOGLE='T_GOOGLE',\n}\n","import {User} from \"../models/User\";\nimport {\n    USER_CURRENT_NOT_AUTHENTICATED,\n    USER_CURRENT_AUTHENTICATED,\n    USERS_ACTIVE_RECEIVED,\n    USERS_KNOWN_RECEIVED,\n    USERS_RECOMMENDED_RECEIVED, USER_LOGIN_STATUS_CHANGED, USER_REGISTRATION_STATUS_CHANGED, USER_CREATED\n} from \"../actions\";\n\nexport enum UserStatus {\n    Initial,\n    LoggedIn,\n    NotLoggedIn,\n}\n\nexport enum UserCreationStatus {\n    Initial,\n    UserCreated,\n}\n\nconst INITIAL_STATE = {\n    currentUserAuthenticated: UserStatus.Initial as UserStatus,\n    current: {} as User,\n    activeUsers: [] as Array<User>,\n    knownUsers: [] as Array<User>,\n    recommendedUsers: [] as Array<User>,\n    userCreationStatus: UserCreationStatus.Initial as UserCreationStatus,\n};\n\nfunction userReducer(state=INITIAL_STATE, action: any) {\n    let reduced;\n    switch (action.type){\n        case USER_CURRENT_AUTHENTICATED:\n            reduced = {...state, current: action.user, currentUserAuthenticated: UserStatus.LoggedIn};\n            break;\n        case USER_CURRENT_NOT_AUTHENTICATED:\n            reduced = {...state, currentUserAuthenticated: UserStatus.NotLoggedIn };\n            break;\n        case USERS_ACTIVE_RECEIVED:\n            reduced = {...state, activeUsers: action.users};\n            break;\n        case USERS_KNOWN_RECEIVED:\n            reduced = {...state, knownUsers: action.users};\n            break;\n        case USERS_RECOMMENDED_RECEIVED:\n            reduced = {...state, recommendedUsers: action.users};\n            break;\n        case USER_LOGIN_STATUS_CHANGED:\n            reduced = {...state, userLoginStatus: action.status};\n            break;\n        /*case USER_REGISTRATION_STATUS_CHANGED:\n            reduced = {...state, newUserCreationStatus: action.status};\n            break;*/\n        case USER_CREATED:\n            reduced = {...state, userCreationStatus: UserCreationStatus.UserCreated};\n            break;\n        default:\n            reduced = state;\n            break;\n    }\n    return reduced;\n}\n\nexport default userReducer;\n","import React from \"react\";\nimport {Button, Intent, IToasterProps, IToastProps, Position, Toaster} from \"@blueprintjs/core\";\n\nclass ErrorToaster extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            autoFocus: false,\n            canEscapeKeyClear: true,\n            position: Position.TOP,\n        };\n\n        this.renderToastIfAny = this.renderToastIfAny.bind(this);\n        this.addToast = this.addToast.bind(this);\n    }\n\n    // @ts-ignore\n    private toaster: Toaster;\n    private refHandlers = {\n        toaster: (ref: Toaster) => (this.toaster = ref),\n    };\n\n    private addToast(message: string) {\n        //toast.className = this.props.data.themeName;\n        let toast = {} as IToastProps;\n\n        toast.icon = \"ban-circle\";\n        toast.intent = Intent.DANGER;\n        toast.message = message;\n\n        toast.timeout = 2000;\n        this.toaster.show(toast);\n    }\n\n    renderToastIfAny() {\n\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any, snapshot: any){\n        if(this.props.toasts.length > 0) {\n            this.addToast(this.props.toasts[0]);\n            return this.props.toasts.shift();\n        }\n    }\n\n    render() {\n        return (<div>\n            <Toaster {...this.state} ref={this.refHandlers.toaster} />\n            {this.renderToastIfAny()}\n        </div>);\n    }\n}\nexport default ErrorToaster;\n","import React, {Dispatch} from \"react\";\nimport {loginUserAction, loginUserWithThirdPartyAction} from \"../store/user/actions\";\nimport {connect} from \"react-redux\";\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport FacebookLogin from \"react-facebook-login\";\nimport GoogleLogin from \"react-google-login\";\nimport {AuthType} from \"../store/user/models/User\";\nimport {Button, Checkbox, Classes, InputGroup, Intent, Label, Tooltip} from \"@blueprintjs/core\";\nimport ErrorToaster from \"../components/shared/ErrorToaster\";\n\nclass LoginPage extends React.Component<any, any> {\n    constructor(props: any){\n        super(props);\n\n        this.state = {\n            emailInput: '',\n            passwordInput: '',\n            termsAccepted: false,\n            errors: [] as Array<String>,\n        };\n\n        this.loginWithFacebook = this.loginWithFacebook.bind(this);\n        this.loginWithGoogle = this.loginWithGoogle.bind(this);\n        this.handleEmailInputChange = this.handleEmailInputChange.bind(this);\n        this.handlePasswordInputChange = this.handlePasswordInputChange.bind(this);\n        this.handleLoginSubmit = this.handleLoginSubmit.bind(this);\n        this.handleAcceptChange = this.handleAcceptChange.bind(this);\n    }\n\n\n    handleEmailInputChange(event: any) {\n        this.setState({emailInput: event.target.value});\n    }\n\n    handlePasswordInputChange(event: any) {\n        this.setState({passwordInput: event.target.value});\n    }\n\n    handleLoginSubmit(event: any) {\n        event.preventDefault();\n\n        if(this.state.emailInput === '' || this.state.passwordInput === ''){\n            this.setState({\n                errors: [...this.state.errors, \"Please fill all fields!\"]\n            });\n            return;\n        }\n        if(!this.state.termsAccepted){\n            this.setState({\n                errors: [...this.state.errors, \"Please accept Terms and Conditions!\"]\n            });\n            return;\n        }\n        this.props.loginUser(this.state.emailInput, this.state.passwordInput);\n    }\n\n    handleAcceptChange() {\n        this.setState({\n            termsAccepted: !this.state.termsAccepted\n        })\n    }\n\n    loginWithFacebook(response: any){\n        this.props.loginUserWithThirdParty(\n            response.email,\n            response.name,\n            response.accessToken,\n            AuthType.T_FACEBOOK);\n    }\n\n    loginWithGoogle(response: any) {\n        this.props.loginUserWithThirdParty(\n            response.profileObj.email,\n            response.profileObj.name,\n            response.accessToken,\n            AuthType.T_GOOGLE);\n    }\n\n    redirectToSignUp() {\n        if(this.props.registrationFinished === false) return <Redirect to={'/sign-up'} />\n    }\n    render() {\n        return (\n            <div>\n                <h1\n                    className={\"tan-text-center\"}>\n                    Sign In</h1>\n\n                <div className={\"tan-inputGroup\"}>\n\n                    <div className={'tan-socialButtons'}>\n                        <div>\n                            <GoogleLogin\n                                clientId=\"775882795786-p487jvef6nk648qvdeonepafptpr248b.apps.googleusercontent.com\"\n                                className={'tan-socialButton'}\n                                buttonText={'Google'}\n                                autoLoad={false}\n                                onSuccess={(response) => this.loginWithGoogle(response)}\n                                onFailure={(response) => this.loginWithGoogle(response)}\n                                cookiePolicy={'single_host_origin'}\n                            />\n                        </div>\n                        <div>\n                            <FacebookLogin\n                                appId=\"525980097979784\"\n                                autoLoad={false}\n                                fields=\"name,email,picture\"\n                                icon={\"fa-facebook\"}\n                                cssClass={'tan-socialButton'}\n                                textButton={' Facebook'}\n                                onClick={() => {}}\n                                callback={(response) => this.loginWithFacebook(response)} />\n                        </div>\n                    </div>\n\n                    <form onSubmit={this.handleLoginSubmit}>\n                        <Label>\n                            Email\n                            <InputGroup\n                                disabled={false}\n                                large={false}\n                                placeholder=\"Email\"\n                                onChange={this.handleEmailInputChange}\n                                value={this.state.emailInput}\n                                type={\"email\"}\n                            />\n                        </Label>\n                        <Label>\n                            Password\n                            <InputGroup\n                                disabled={false}\n                                large={false}\n                                placeholder=\"Password\"\n                                onChange={this.handlePasswordInputChange}\n                                value={this.state.passwordInput}\n                                type={\"password\"}\n                            />\n                        </Label>\n\n                        <Checkbox\n                            value={this.state.termsAccepted}\n                            onChange={this.state.handleAcceptChange}\n                            label=\"I accept the terms and conditions.\"\n                        />\n\n                        <div className={'tan-right'}>\n                            <Button\n                                intent={Intent.SUCCESS}\n                                icon=\"refresh\"\n                                type={\"submit\"}\n                                text={\"Sign in\"} />\n                        </div>\n                    </form>\n\n                    <p\n                        className={\"tan-text-right\"}>\n                        Create an account\n                        <b>\n                            <NavLink to=\"/sign-up\"> here</NavLink>\n                        </b>!\n                    </p>\n\n                    <ErrorToaster\n                        toasts={this.state.errors}\n                    />\n                    {this.redirectToSignUp()}\n                </div>\n\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state: any) => {\n    return {\n        registrationFinished: state.users.current.registration_finished\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n    return {\n        loginUser: (email: string, password: string) => dispatch(loginUserAction(email, password)),\n        loginUserWithThirdParty: (email: string, full_name: string, access_token: string, auth_type: AuthType) => dispatch(loginUserWithThirdPartyAction(email, full_name, access_token, auth_type))\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\n","export enum LanguageDifficulty {\n    Beginner,\n    Advanced,\n    Expert,\n}\n","import React, {Dispatch} from \"react\";\nimport {connect} from \"react-redux\";\nimport {registerUserAction} from \"../../store/user/actions\";\nimport {UserCreationStatus} from \"../../store/user/reducer\";\nimport {Button, Checkbox, FileInput, InputGroup, Intent, Label} from \"@blueprintjs/core\";\nimport {NavLink} from \"react-router-dom\";\nimport ErrorToaster from \"../shared/ErrorToaster\";\n\nclass UserBasicData extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            fullNameInput: '',\n            passwordInput: '',\n            passwordRepeatInput: '',\n            emailInput: '',\n            termsAccepted: false,\n            errors: [] as Array<String>,\n            profilePicture: {},\n            profilePicturePreviewUrl: '' as string\n        };\n\n        this.handleFullNameInputChange = this.handleFullNameInputChange.bind(this);\n        this.handlePasswordInputChange = this.handlePasswordInputChange.bind(this);\n        this.handlePasswordRepeatInputChange = this.handlePasswordRepeatInputChange.bind(this);\n        this.handleEmailInputChange = this.handleEmailInputChange.bind(this);\n        this.handleAcceptChange = this.handleAcceptChange.bind(this);\n        this.renderProfilePicturePreview = this.renderProfilePicturePreview.bind(this);\n        this.handleRegistrationSubmit = this.handleRegistrationSubmit.bind(this);\n        this.handleProfilePictureInputChange = this.handleProfilePictureInputChange.bind(this);\n    }\n\n    handleFullNameInputChange(event: any) {\n        this.setState({fullNameInput: event.target.value});\n    }\n    handlePasswordInputChange(event: any) {\n        this.setState({passwordInput: event.target.value});\n    }\n    handlePasswordRepeatInputChange(event: any) {\n        this.setState({passwordRepeatInput: event.target.value});\n    }\n    handleEmailInputChange(event: any) {\n        this.setState({emailInput: event.target.value});\n    }\n    handleAcceptChange() {\n        this.setState({\n            termsAccepted: !this.state.termsAccepted\n        });\n    }\n    handleProfilePictureInputChange(event: any) {\n        this.setState({\n            profilePicture: event.target.files[0],\n            profilePicturePreviewUrl: URL.createObjectURL(event.target.files[0])\n        });\n    }\n    handleRegistrationSubmit(event: any) {\n        event.preventDefault();\n\n        if(this.state.emailInput === ''||\n            this.state.passwordInput === '' ||\n            this.state.passwordRepeatInput === '' ||\n            this.state.fullNameInput === ''){\n            this.setState({\n                errors: [...this.state.errors, \"Please fill all fields!\"]\n            });\n            return;\n        }\n        if(!this.state.termsAccepted){\n            this.setState({\n                errors: [...this.state.errors, \"Please accept Terms and Conditions!\"]\n            });\n            return;\n        }\n        if(this.state.passwordInput !== this.state.passwordRepeatInput){\n            this.setState({\n                errors: [...this.state.errors, \"Password and Repeat Password field do not match!\"]\n            });\n            return;\n        }\n\n\n        this.props.registerUser(\n            this.state.fullNameInput,\n            this.state.emailInput,\n            this.state.passwordInput\n        );\n    }\n\n    renderProfilePicturePreview() {\n        if(this.state.profilePicturePreviewUrl !== '') {\n            return (<div className={'tan-avatar'}>\n                <img src={this.state.profilePicturePreviewUrl} alt=\"preview_profile_pic\"/>\n            </div>);\n        }\n    }\n\n    renderNextButton() {\n        if(this.props.userCreationStatus === UserCreationStatus.UserCreated) {\n            return this.props.nextClick();\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1\n                    className={\"tan-text-center\"}>\n                    Sign Up</h1>\n\n                <div className={\"tan-inputGroup\"}>\n\n                    <form onSubmit={this.handleRegistrationSubmit}>\n                        <Label>\n                            Email\n                            <InputGroup\n                                disabled={false}\n                                large={false}\n                                placeholder=\"Email\"\n                                onChange={this.handleEmailInputChange}\n                                value={this.state.emailInput}\n                                type={\"email\"}\n                            />\n                        </Label>\n                        <Label>\n                            Full Name:\n                            <InputGroup\n                                disabled={false}\n                                large={false}\n                                placeholder=\"Full Name\"\n                                onChange={this.handleFullNameInputChange}\n                                value={this.state.fullNameInput}\n                                type={\"text\"}\n                            />\n                        </Label>\n                        <Label>\n                            Password\n                            <InputGroup\n                                disabled={false}\n                                large={false}\n                                placeholder=\"Password\"\n                                onChange={this.handlePasswordInputChange}\n                                value={this.state.passwordInput}\n                                type={\"password\"}\n                            />\n                        </Label>\n\n                        <Label>\n                            Repeat password\n                            <InputGroup\n                                disabled={false}\n                                large={false}\n                                placeholder=\"Repeat password\"\n                                onChange={this.handlePasswordRepeatInputChange}\n                                value={this.state.passwordRepeatInput}\n                                type={\"password\"}\n                            />\n                        </Label>\n\n                        <Label>\n                            Select profile picture\n                            <FileInput\n                                text=\"Choose file...\"\n                                onInputChange={this.handleProfilePictureInputChange} />\n                        </Label>\n\n                        {this.renderProfilePicturePreview()}\n\n                        <Checkbox\n                            value={this.state.termsAccepted}\n                            onChange={this.handleAcceptChange}\n                            label=\"I accept the terms and conditions.\"\n                        />\n\n                        <div className={'tan-right'}>\n                            <Button\n                                intent={Intent.SUCCESS}\n                                icon=\"refresh\"\n                                type={\"submit\"}\n                                text={\"Sign up\"} />\n                        </div>\n                    </form>\n\n                    <p\n                        className={\"tan-text-right\"}>\n                        Already have an account?\n                        <b>\n                            <NavLink to=\"/sign-in\"> Sign in</NavLink>\n                        </b>!\n                    </p>\n                </div>\n\n                <ErrorToaster\n                    toasts={this.state.errors}\n                />\n                {this.renderNextButton()}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        userCreationStatus: state.users.userCreationStatus\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n    return {\n        registerUser: (full_name: string, email: string, password: string) => dispatch(registerUserAction(full_name, email, password))\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UserBasicData);\n","import React from \"react\";\nimport {LanguageDifficulty} from \"../../store/static/models/LanguageDifficulty\";\nimport {Intent, Tag} from \"@blueprintjs/core\";\n\nclass LanguageSelectItem extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            selectValue: LanguageDifficulty.Beginner as LanguageDifficulty\n        };\n\n        this.onSelectChange = this.onSelectChange.bind(this);\n        this.onItemStateChange = this.onItemStateChange.bind(this);\n        this.renderSelect = this.renderSelect.bind(this);\n    }\n\n    onSelectChange(event: any) {\n        this.setState({\n            selectValue: event.target.value\n        });\n        this.props.updateLanguageDifficulty(event.target.value);\n    }\n\n    onItemStateChange() {\n        const language = (!this.props.withDifficulty) ?\n                            {id: this.props.language.id} :\n                            {id: this.props.language.id, d: this.state.selectValue};\n\n        if(!this.props.isSelected) {\n            this.props.addLanguage(language);\n        }\n        else {\n            this.props.removeLanguage(language);\n        }\n    }\n\n\n    renderSelect() {\n        if(this.props.withDifficulty && this.props.isSelected) {\n            return (\n                <select onChange={this.onSelectChange} value={this.state.selectValue}>\n                    <option value={LanguageDifficulty.Beginner}>Beginner</option>\n                    <option value={LanguageDifficulty.Advanced}>Advanced</option>\n                    <option value={LanguageDifficulty.Expert}>Expert</option>\n                </select>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <div className={'tan-languages-item'}>\n                <Tag\n                    onClick={this.onItemStateChange}\n                    large={true}\n                    round={true}\n                    interactive={true}\n                    intent={this.props.isSelected ? Intent.SUCCESS : Intent.NONE}\n                >{this.props.language.name}</Tag>\n                {this.renderSelect()}\n            </div>\n        );\n    }\n}\n\nexport default LanguageSelectItem;\n","import React, {Dispatch} from \"react\";\nimport {registerUserAction, userPreferencesPostAction} from \"../store/user/actions\";\nimport {connect} from \"react-redux\";\nimport UserBasicData from \"../components/registration/UserBasicData\";\nimport LanguageSelect from \"../components/registration/LanguageSelect\";\nimport TagSelect from \"../components/registration/TagSelect\";\nimport {LanguageDifficulty} from \"../store/static/models/LanguageDifficulty\";\nimport {LearningGoal} from \"../store/static/models/LearningGoal\";\nimport {languagesGetAction, learningGoalsGetAction, topicsGetAction} from \"../store/static/actions\";\n\nexport interface SelectedLanguage {\n    id: number;\n}\n\nexport interface SelectedLanguageWithDifficulty {\n    d: LanguageDifficulty\n}\n\nexport interface SelectedTag {\n    id: number;\n}\n\n\nenum RegistrationStep {\n    UserBasicData,\n    UserNativeLanguages,\n    UserFluentLanguages,\n    UserGoalLanguages,\n    UserTopicsLiked,\n    UserGoals,\n}\n\nclass RegisterPage extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n\n        //registrationFinished is ready, since we only load this page if we know that the user is registered or not\n        this.state = {\n            currentRegistrationStep: (this.props.registrationFinished === false)\n                                        ? RegistrationStep.UserNativeLanguages\n                                        : RegistrationStep.UserBasicData,\n\n            userPreferences: {\n                nativeLanguages: [] as Array<SelectedLanguage>,\n                fluentLanguages: [] as Array<SelectedLanguage>,\n                goalLanguages: [] as Array<SelectedLanguageWithDifficulty>,\n                topicsLiked: [] as Array<SelectedTag>,\n                learningGoals: [] as Array<LearningGoal>,\n            }\n        };\n\n        this.submitUserBasicData = this.submitUserBasicData.bind(this);\n        this.submitUserPreferences = this.submitUserPreferences.bind(this);\n\n\n        this.props.loadStatic();\n    }\n\n    submitUserBasicData(username: string, email: string, password: string) {\n        this.props.registerUser(\n            username,\n            email,\n            password,\n        );\n    }\n\n    submitUserPreferences(){\n        this.props.setUserPreferences(this.state.userPreferences);\n    }\n\n    renderRegistrationComponent() {\n        switch(this.state.currentRegistrationStep) {\n            default:\n            case RegistrationStep.UserBasicData:\n                return (\n                    <UserBasicData\n                        nextClick={() => this.setState({currentRegistrationStep: RegistrationStep.UserNativeLanguages})}\n                        handleUserBasicDataSubmission={this.submitUserBasicData}/>);\n\n            case RegistrationStep.UserNativeLanguages:\n                return (\n                    <LanguageSelect\n                        title=\"Select the languages  you speak natively\"\n                        withDifficulty={false}\n                        selectedLanguages={this.state.userPreferences.nativeLanguages}\n                        nextClick={() => this.setState({currentRegistrationStep: RegistrationStep.UserFluentLanguages})}/>);\n\n            case RegistrationStep.UserFluentLanguages:\n                return (\n                    <LanguageSelect\n                        title=\"Select the languages  you speak fluently\"\n                        withDifficulty={false}\n                        selectedLanguages={this.state.userPreferences.fluentLanguages}\n                        nextClick={() => this.setState({currentRegistrationStep: RegistrationStep.UserGoalLanguages})}/>);\n\n\n            case RegistrationStep.UserGoalLanguages:\n                return (\n                    <LanguageSelect\n                        title=\"Select the languages  you want to learn\"\n                        withDifficulty={true}\n                        selectedLanguages={this.state.userPreferences.goalLanguages}\n                        nextClick={() => this.setState({currentRegistrationStep: RegistrationStep.UserTopicsLiked})}/>);\n\n            case RegistrationStep.UserTopicsLiked:\n                return (\n                    <TagSelect\n                        title=\"Select the topics  you interested in.\"\n                        tags={this.props.topics}\n                        selectedTags={this.state.userPreferences.topicsLiked}\n                        nextClick={() => this.setState({currentRegistrationStep: RegistrationStep.UserGoals})}/>);\n\n            case RegistrationStep.UserGoals:\n                return (\n                    <TagSelect\n                        title=\"Select your language learning goals.\"\n                        tags={this.props.learning_goals}\n                        selectedTags={this.state.userPreferences.learningGoals}\n                        nextClick={this.submitUserPreferences}  />);\n        }\n    }\n\n\n    render(){\n        return this.renderRegistrationComponent();\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        registrationFinished: state.users.current.registration_finished,\n        languages: state.static.languages,\n        topics: state.static.topics,\n        learning_goals: state.static.learning_goals,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n    return {\n        registerUser: (username: string, email: string, password: string) => dispatch(registerUserAction(username, email, password)),\n        loadStatic: () => {\n            dispatch(languagesGetAction());\n            dispatch(topicsGetAction());\n            return dispatch(learningGoalsGetAction());\n        },\n        setUserPreferences: (preferences: any) => dispatch(userPreferencesPostAction(preferences))\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterPage);\n","import React, {Dispatch} from \"react\";\nimport {registerUserAction} from \"../../store/user/actions\";\nimport {connect} from \"react-redux\";\nimport {Language} from \"../../store/static/models/Language\";\nimport {SelectedLanguage, SelectedLanguageWithDifficulty} from \"../../pages/RegisterPage\";\nimport LanguageSelectItem from \"./LanguageSelectItem\";\nimport _ from 'lodash';\nimport {Button, Intent, IToastProps, Position, Toaster} from \"@blueprintjs/core\";\nimport {IToasterProps} from \"@blueprintjs/core/lib/esm/components/toast/toaster\";\nimport ErrorToaster from \"../shared/ErrorToaster\";\n\nclass LanguageSelect extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            selectedLanguages:\n                (this.props.withDifficulty) ?\n                    ([] as Array<SelectedLanguageWithDifficulty>) :\n                    ([] as Array<SelectedLanguage>),\n            errors: [] as Array<string>,\n        };\n        this.isLanguageSelected = this.isLanguageSelected.bind(this);\n        this.submitLanguages = this.submitLanguages.bind(this);\n        this.renderLanguages = this.renderLanguages.bind(this);\n        this.removeLanguage = this.removeLanguage.bind(this);\n        this.selectLanguage = this.selectLanguage.bind(this);\n        this.updateDifficulty = this.updateDifficulty.bind(this);\n    }\n\n    componentWillReceiveProps(): void {\n        this.setState({\n            selectedLanguages:\n                (this.props.withDifficulty) ?\n                    ([] as Array<SelectedLanguageWithDifficulty>) :\n                    ([] as Array<SelectedLanguage>)\n        })\n    }\n\n    submitLanguages() {\n        if(this.state.selectedLanguages.length <= 0){\n            this.setState({\n                errors: [...this.state.errors, \"Select at least one language!\"]\n            });\n            return;\n        }\n        this.state.selectedLanguages.forEach((l: any) => {\n            this.props.selectedLanguages.push(l);\n        });\n        this.props.nextClick();\n    }\n\n    renderLanguages() {\n        return this.props.languages.map((language: Language) => {\n            return <LanguageSelectItem\n                        key={language.id}\n                        language={language}\n                        withDifficulty={this.props.withDifficulty}\n                        updateLanguageDifficulty={this.updateDifficulty}\n                        addLanguage={this.selectLanguage}\n                        removeLanguage={this.removeLanguage}\n                        isSelected={this.isLanguageSelected(language)}\n                    />\n\n        });\n    }\n    isLanguageSelected(language: any) {\n        return this.state.selectedLanguages.findIndex((l: any) => l.id === language.id) !== -1;\n    }\n    selectLanguage(language: any) {\n        this.setState({\n            selectedLanguages: [...this.state.selectedLanguages, {...language}]\n        });\n    }\n    removeLanguage(language: any) {\n        const languages = this.state.selectedLanguages;\n        _.remove(languages, (l: any) => l.id === language.id);\n        this.setState({\n            selectedLanguages: [...languages]\n        });\n    }\n    updateDifficulty(language: Language){\n        this.removeLanguage(language);\n        this.selectLanguage(language);\n    }\n\n\n    render() {\n        return (\n            <div className={'container'}>\n                <h1 className={'tan-text-center'}>{this.props.title}</h1>\n                <div className={'tan-languages'}>\n                    {this.renderLanguages()}\n                </div>\n                <div className={'tan-center'} style={{\"marginTop\": '32px'}}>\n                    <Button\n                        intent={Intent.SUCCESS}\n                        text={\"Continue\"}\n                        onClick={() => {this.submitLanguages()}}\n                    />\n                </div>\n\n\n                <ErrorToaster\n                    toasts={this.state.errors}\n                />\n            </div>\n        );\n    }\n\n\n}\n\n\nconst mapStateToProps = (state: any) => {\n    return {\n        languages: state.static.languages\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n    return {\n\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LanguageSelect);\n\n","import React from \"react\";\nimport {SelectedTag} from \"../../pages/RegisterPage\";\nimport {Language} from \"../../store/static/models/Language\";\n\nclass TagSelect extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n\n\n        this.state = {\n            selectedTags: [] as Array<SelectedTag>\n        };\n\n        this.submitTags = this.submitTags.bind(this);\n        this.renderTags = this.renderTags.bind(this);\n    }\n\n    renderTags() {\n        return this.props.tags.map((tag: any) => {\n            return <h4 key={tag.id} onClick={() => this.selectTag(tag.id)}>{tag.name}</h4>\n        });\n    }\n\n    selectTag(id: number) {\n        this.setState({\n            selectedTags: [...this.state.selectedTags, {id}]\n        });\n    }\n\n    submitTags() {\n        this.state.selectedTags.forEach((l: any) => {\n            this.props.selectedTags.push(l);\n        });\n        this.props.nextClick();\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.props.title}</h1>\n                {this.renderTags()}\n                <button onClick={() => {this.submitTags()}}>Submit</button>\n            </div>\n        );\n    }\n}\n\nexport default TagSelect;\n","import {Dispatch} from \"redux\";\nimport {makeRequest} from \"../../../util\";\nimport {USER_CURRENT_AUTHENTICATED} from \"../../user/actions\";\n\nexport const LANGUAGES_GET = 'LANGUAGES_GET';\nexport const TOPICS_GET = 'TOPICS_GET';\nexport const LEARNING_GOALS_GET = 'LEARNING_GOALS_GET';\n\n\nexport function languagesGetAction() {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/static/languages', {})\n            .then(response => {\n                return dispatch({\n                    type: LANGUAGES_GET,\n                    languages: response.languages\n                });\n            })\n            .catch(error => console.log(\"ERROR FETCHING LANGUAGES\"));\n    };\n}\n\n\nexport function topicsGetAction() {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/static/topics', {})\n            .then(response => {\n                return dispatch({\n                    type: TOPICS_GET,\n                    topics: response.topics\n                });\n            })\n            .catch(error => console.log(\"ERROR FETCHING TOPICS\"));\n    };\n}\n\n\nexport function learningGoalsGetAction() {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/static/learning_goals', {})\n            .then(response => {\n                console.log(response);\n                return dispatch({\n                    type: LEARNING_GOALS_GET,\n                    learning_goals: response.learning_goals\n                });\n            })\n            .catch(error => console.log(\"ERROR FETCHING LEARNING GOALS\"));\n    };\n}\n","export enum MessageType {\n    TEXT= \"TEXT\",\n    IMAGE = \"IMAGE\",\n}\n\nexport interface Message {\n    sender_id: string;\n    target_id: string;\n    message: string;\n    sent_at: Date;\n    message_type: MessageType;\n}\n","\nimport React from \"react\";\nimport {Route, Redirect} from \"react-router\"\n\n// @ts-ignore\nexport const ProtectedRoute = ({ component: Component, condition, redirectUrl, ...rest }) => (\n    <Route {...rest} render={(props) => (\n        condition ?\n            <Component {...props} /> :\n            <Redirect to={redirectUrl} />\n    )} />\n)\n","import {Message, MessageType} from \"../models/Message\";\nimport {Dispatch} from \"redux\";\nimport {makeRequest} from \"../../../util\";\n\nexport const MESSAGES_GET = 'MESSAGES_GET';\nexport const MESSAGE_SEND = 'MESSAGE_SEND';\nexport const MESSAGE_SENT = 'MESSAGE_SENT';\nexport const MESSAGE_RECEIVED = 'MESSAGE_RECEIVED';\n\n\nexport function getMessagesAction() {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/message/',{})\n            .then(messages => {\n                return dispatch({\n                    type: MESSAGES_GET,\n                    messages: messages\n                });\n            })\n            .catch(err => {\n                console.log(err)\n            });\n    };\n}\n\nexport function sendImageMessageAction(file: any, sender_id: number, target_id: number) {\n\n    const data = new FormData();\n    data.append('file', file);\n\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/message/image',{\n            method: \"POST\",\n            body: data\n            })\n            .then(response => {\n                return dispatch(messageSendAction({\n                    sender_id: sender_id.toString(),\n                    target_id: target_id.toString(),\n                    message: response.data,\n                    sent_at: new Date(),\n                    message_type: MessageType.IMAGE\n                }))\n            })\n            .catch(err => {\n                console.log(err)\n            });\n    };\n}\n\n\n\nexport const messageReceivedAction = (message: Message) => {\n    return {\n        type: MESSAGE_RECEIVED,\n        message: message as Message\n    };\n};\n\nexport const messageSendAction = (message: Message) => {\n    return {\n        type: MESSAGE_SEND,\n        message: message as Message\n    };\n};\n\nexport const messageSentAction = (message: Message) => {\n    return {\n        type: MESSAGE_SENT,\n        message: message as Message\n    };\n};\n","import React, {Dispatch} from \"react\";\nimport {connect} from \"react-redux\";\nimport {messageSendAction, sendImageMessageAction} from \"../store/message/actions\";\nimport {Message, MessageType} from \"../store/message/models/Message\";\nimport _ from 'lodash';\nimport {NavLink} from 'react-router-dom'\nimport {Button, InputGroup, Intent, Label} from \"@blueprintjs/core\";\nimport {IconNames} from \"@blueprintjs/icons\";\n\nclass ChatPage extends React.Component<any, any> {\n\n    fileInput: any;\n\n    constructor(props: any){\n        super(props);\n\n        this.state = {\n            chatRecipient: this.props.match.params.id,\n            inputMessage: '',\n        };\n        this.handleInputMessageChange = this.handleInputMessageChange.bind(this);\n        this.handleInputMessageSubmit = this.handleInputMessageSubmit.bind(this);\n        this.handleInputImageSubmit = this.handleInputImageSubmit.bind(this);\n        this.renderTextMessage = this.renderTextMessage.bind(this);\n        this.renderImageMessage = this.renderImageMessage.bind(this);\n    }\n\n    handleInputMessageChange(event: any) {\n        this.setState({inputMessage: event.target.value});\n    }\n\n    handleInputMessageSubmit() {\n        if(this.state.inputMessage === '') return;\n        this.props.sendTextMessage(\n            this.props.currentUser.id,\n            this.state.chatRecipient,\n            this.state.inputMessage\n        );\n        this.setState({inputMessage: ''});\n    }\n\n    handleInputImageSubmit(event: any) {\n        const fileToUpload = event.target.files[0];\n        this.props.sendImageMessage(fileToUpload, this.props.currentUser.id, this.state.chatRecipient);\n    }\n\n    getMessagesWithRecipient() {\n        let messagesWithRecipient = this.props.messages[this.state.chatRecipient];\n        if(messagesWithRecipient){\n            return _.sortBy(\n                messagesWithRecipient,\n                (message: Message) => new Date(message.sent_at));\n        }\n        return [];\n    }\n\n    renderTextMessage(msg: Message) {\n        if(msg.sender_id.toString() === this.props.currentUser.id.toString()) {\n            return (\n                <div\n                    key={Math.round(Math.random()*100000)}\n                    className={'tan-chat-message tan-chat-message-own'}>\n                    <p className={'tan-chat-message-content'}>\n                        {msg.message}\n                    </p>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div\n                    key={Math.round(Math.random()*100000)}\n                    className={'tan-chat-message tan-chat-message-recipient'}>\n                    <p className={'tan-chat-message-content'}>\n                        {msg.message}\n                    </p>\n                </div>\n            );\n        }\n    }\n\n    renderImageMessage(msg: Message) {\n        return (\n            <div\n                key={Math.round(Math.random()*100000)}\n                className={'tan-chat-message tan-chat-message-own'}>\n                <img\n                    className={'tan-chat-message-image'}\n                    key={msg.message} src={`http://127.0.0.1:5000/static/img/${msg.message}`} alt=\"\"/>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n           <div>\n               <NavLink to=\"/chat\"> --Chats </NavLink>\n\n               {this.state.chatRecipient}\n\n               <div className={\"tan-chat-window\"}>\n                   <div className={\"tan-chat-window-messages\"}>\n                       {this.getMessagesWithRecipient().map((msg: Message) => {\n                           if(msg.message_type === MessageType.TEXT) {\n                               return this.renderTextMessage(msg);\n                           }\n                           else{\n                               return this.renderImageMessage(msg);\n                           }\n\n                       })}\n                   </div>\n\n                   <div className={\"tan-chat-window-input\"}>\n                       <div className={\"tan-chat-window-input-imageInput\"}>\n                           <label>\n                               <Button icon=\"media\" onClick={() => this.fileInput.click()}/>\n                               <form style={{'display': 'none'}}>\n                                   <input ref={element => this.fileInput = element} type=\"file\" name=\"file\" onChange={this.handleInputImageSubmit} />\n                               </form>\n                           </label>\n                       </div>\n                       <div className={\"tan-chat-window-input-textInput\"}>\n                           <InputGroup\n                               value={this.state.inputMessage}\n                               onChange={this.handleInputMessageChange}\n                               placeholder=\"Enter your message...\"\n                               rightElement={\n                                   (<Button\n                                       icon={IconNames.CIRCLE_ARROW_RIGHT}\n                                       minimal={true}\n                                       onClick={this.handleInputMessageSubmit}\n                                   />)\n                               }\n                               onKeyPress={(target) => {\n                                   if(target.key === 'Enter'){\n                                       return this.handleInputMessageSubmit();\n                                   }\n                               }\n                               }\n                               type={\"text\"}\n                           />\n                       </div>\n                   </div>\n               </div>\n\n           </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state: any) => {\n    return {\n        currentUser: state.users.current,\n        messages: state.messages.messages,\n    }\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n    return {\n        sendTextMessage: (from: string, to: string, text: string) => dispatch(messageSendAction({\n            sender_id: from,\n            target_id: to,\n            message: text,\n            sent_at: new Date(),\n            message_type: MessageType.TEXT\n        })),\n        sendImageMessage: (file: any, sender_id: number, target_id: number) => dispatch(sendImageMessageAction(file, sender_id, target_id))\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatPage);\n\n","import {Dispatch} from \"redux\";\nimport {makeRequest} from \"../../../util\";\nimport Event from \"../models/Event\";\n\n\nexport const EVENT_GET = 'EVENT_GET';\nexport const EVENTS_GET = 'EVENTS_GET';\nexport const EVENTS_USER_GOING_GET = 'EVENTS_USER_GOING_GET';\nexport const EVENTS_USER_CREATED_GET = 'EVENTS_USER_CREATED_GET';\nexport const EVENT_CREATED = 'EVENT_CREATED';\n\nexport function eventsGetAction() {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/event/',{})\n            .then(events => {\n                return dispatch({\n                    type: EVENTS_GET,\n                    events: events.events\n                });\n            })\n            .catch(err => {\n                console.log(err)\n            });\n    };\n}\n\nexport function eventGetAction(id: number) {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest(`/event/${id}`,{})\n            .then(event => {\n                return dispatch({\n                    type: EVENT_GET,\n                    event\n                });\n            })\n            .catch(err => {\n                console.log(err)\n            });\n    };\n}\n\nexport function eventsUserCreatedGetAction(){\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/event/user_created',{})\n            .then(events => {\n                return dispatch({\n                    type: EVENTS_USER_CREATED_GET,\n                    events: events.events\n                });\n            })\n            .catch(err => {\n                console.log(err)\n            });\n    };\n}\n\nexport function eventsUserGoingGetAction() {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/event/user_joined',{})\n            .then(events => {\n                return dispatch({\n                    type: EVENTS_USER_GOING_GET,\n                    events: events.events\n                });\n            })\n            .catch(err => {\n                console.log(err)\n            });\n    };\n}\n\nexport function userJoinEventAction(eventId: number) {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest(`/event/${eventId}/join`,{})\n            .then(event => {\n                /*return dispatch({\n                    type: EVENTS_USER_GOING_GET,\n                    events\n                });*/\n            })\n            .catch(err => {\n                console.log(err)\n            });\n    };\n}\n\nexport function eventCreateAction(event: Event) {\n    return function(dispatch: Dispatch<any>) {\n        makeRequest('/event/',\n            {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(event)\n            })\n            .then(response => {\n                return dispatch({\n                    type: EVENT_CREATED,\n                    event: response.data\n                });\n            })\n            .catch(error => console.log(error))\n    };\n}\n","import React, {Dispatch} from \"react\";\nimport {connect} from \"react-redux\";\nimport Event from \"../store/events/models/Event\";\nimport {eventsGetAction, eventsUserCreatedGetAction, eventsUserGoingGetAction} from \"../store/events/actions\";\nimport {NavLink} from \"react-router-dom\";\n\nclass EventsPage extends React.Component<any, any> {\n    constructor(props: any){\n        super(props);\n\n        this.state = {};\n        this.props.getEventsAll();\n        this.props.getEventsUserCreated();\n        this.props.getEventsGoing();\n    }\n\n    renderAllEvents() {\n        if(this.props.events) {\n            return (this.props.events.map((event: Event) => {\n                return <p>{event.name}</p>\n            }));\n        }\n    }\n\n    renderUserCreatedEvents() {\n        if(this.props.events) {\n            return (this.props.events.map((event: Event) => {\n                return <p>{event.name}</p>\n            }));\n        }\n    }\n\n    renderUserGoingEvents() {\n        if(this.props.eventsUserGoing) {\n            return (this.props.eventsUserGoing.map((event: Event) => {\n                return <p>{event.name}</p>\n            }));\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>User created events</h3>\n                {this.renderUserCreatedEvents()}\n                <h3>User going events</h3>\n                {this.renderUserGoingEvents()}\n                <h3>Events</h3>\n                {this.renderAllEvents()}\n\n\n                <NavLink to=\"/chat\"> --Chats </NavLink>\n                <NavLink to=\"/event\"> --Events </NavLink>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        events: state.events.events,\n        eventsUserCreated: state.events.eventsUserCreated,\n        eventsUserGoing: state.events.eventsUserGoing,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n    return {\n        getEventsAll: () => dispatch(eventsGetAction()),\n        getEventsUserCreated: () => dispatch(eventsUserCreatedGetAction()),\n        getEventsGoing: () => dispatch(eventsUserGoingGetAction()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventsPage);\n","import React, {Dispatch} from \"react\";\nimport {connect} from \"react-redux\";\nimport {eventGetAction, userJoinEventAction} from \"../store/events/actions\";\nimport Event from \"../store/events/models/Event\";\nimport {NavLink} from \"react-router-dom\";\n\nclass EventPage extends React.Component<any, any> {\n    constructor(props: any){\n        super(props);\n\n        this.state = {\n\n        };\n\n        this.props.loadEvent(Number(this.props.match.params.id));\n//load detailed event here with user_Created boolean user_joined boolean\n    }\n\n    renderEvent() {\n        if(this.props.event) {\n            return (<div>\n                <p>{this.props.event.name}</p>\n                <h4 onClick={() => this.props.joinEvent(this.props.event.id)}>JOIN</h4>\n            </div>)\n        }\n        else {\n            return <p>Loading...</p>\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <NavLink to=\"/event\"> --Events </NavLink>\n                {this.renderEvent()}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n    return {\n        event: state.events.events.find((e: Event) => e.id === Number(ownProps.match.params.id))\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n    return {\n        loadEvent: (id: number) => dispatch(eventGetAction(id)),\n        joinEvent: (eventId: number) => dispatch(userJoinEventAction(eventId))\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(EventPage);\n\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"react\";\nimport {Redirect} from 'react-router'\nimport {eventCreateAction} from \"../store/events/actions\";\nimport Event from '../store/events/models/Event';\nimport {loginUserAction} from \"../store/user/actions\";\nimport {NavLink} from \"react-router-dom\";\n\nclass EventCreatePage extends React.Component<any, any> {\n    constructor(props: any){\n        super(props);\n\n        this.state = {\n            name: \"\",\n            date: (new Date()) as Date,\n            public: false as boolean,\n            location: \"\",\n            details: \"\",\n            cover_photo: {} as File,\n        };\n\n        this.handleNameInputChange = this.handleNameInputChange.bind(this);\n        this.handleEventVisibilityInputChange = this.handleEventVisibilityInputChange.bind(this);\n        this.handleLocationInputChange = this.handleLocationInputChange.bind(this);\n        this.handleDetailsInputChange = this.handleDetailsInputChange.bind(this);\n        this.handleEventCreationSubmit = this.handleEventCreationSubmit.bind(this);\n        this.handleCoverInputChange = this.handleCoverInputChange.bind(this);\n    }\n\n    handleNameInputChange(event: any) {\n        this.setState({name: event.target.value});\n    }\n    handleEventVisibilityInputChange() {\n        this.setState({public: !this.state.public});\n    }\n    handleLocationInputChange(event: any) {\n        this.setState({location: event.target.value});\n    }\n    handleDetailsInputChange(event: any) {\n        this.setState({details: event.target.value});\n    }\n    handleCoverInputChange(event: any){\n        this.setState({cover_photo: event.target.files[0]})\n    }\n\n    handleEventCreationSubmit(event: any) {\n        event.preventDefault();\n\n        this.props.createEvent({\n            id: 0,\n            name: this.state.name,\n            date: this.state.date,\n            public: this.state.public,\n            location: this.state.location,\n            details: this.state.details,\n            cover_photo: this.state.cover_photo\n        });\n    }\n\n    redirectIfEventCreated() {\n        //console.log(this.props.eventCreationStatus);\n        if(this.props.eventCreationStatus && this.props.eventCreationStatus.created){\n            return <Redirect to={`/event/${this.props.eventCreationStatus.event.id}`} />\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <NavLink to=\"/event\"> --Events </NavLink>\n                <form onSubmit={this.handleEventCreationSubmit}>\n                    <label>\n                        Name:\n                        <input type=\"text\" value={this.state.name} onChange={this.handleNameInputChange} />\n                    </label>\n                    <label>\n                        Public:\n                        <input type=\"checkbox\" checked={this.state.public} onChange={this.handleEventVisibilityInputChange} />\n                    </label>\n                    <label>\n                        Location:\n                        <input type=\"text\" value={this.state.location} onChange={this.handleLocationInputChange} />\n                    </label>\n                    <label>\n                        Details:\n                        <input type=\"text\" value={this.state.details} onChange={this.handleDetailsInputChange} />\n                    </label>\n                    <label>\n                        Cover:\n                        <input type=\"file\" name=\"file\" onChange={this.handleCoverInputChange} />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n\n                {this.redirectIfEventCreated()}\n            </div>\n        );\n    }\n}\n\n\n\nconst mapStateToProps = (state: any) => {\n    return {\n        eventCreationStatus: state.events.eventCreationStatus\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n    return {\n        createEvent: (event: Event) => dispatch(eventCreateAction(event))\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(EventCreatePage);\n","import React, {Dispatch} from 'react';\nimport {createBrowserHistory} from 'history';\nimport {connect} from \"react-redux\";\nimport {Router, Route, Redirect} from 'react-router';\nimport ChatsPage from \"./pages/ChatsPage\";\nimport {getCurrentUserAction} from \"./store/user/actions\";\nimport LoginPage from \"./pages/LoginPage\";\n\nimport \"./App.scss\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport {ProtectedRoute} from \"./util/ProtectedRoute\";\nimport ChatPage from \"./pages/ChatPage\";\nimport EventsPage from \"./pages/EventsPage\";\nimport EventPage from \"./pages/EventPage\";\nimport {UserStatus} from \"./store/user/reducer\";\nimport EventCreatePage from \"./pages/EventCreatePage\";\nimport {connectSocketAction} from \"./store/socket/actions\";\n\n\nconst history = createBrowserHistory();\n\nclass App extends React.Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n        this.props.getCurrentUser();\n    }\n\n    componentDidMount(): void {\n    }\n\n    isUserAuthenticated(): boolean {\n        return this.props.isUserLoggedIn === UserStatus.LoggedIn && this.props.registrationFinished;\n    }\n\n    renderBasedOnUserAuthentication() {\n        if(this.props.isUserLoggedIn === UserStatus.Initial) return;\n\n        return (\n            <Router history={history}>\n\n                <ProtectedRoute\n                    exact path=\"/chat\"\n                    component={ChatsPage}\n                    condition={this.isUserAuthenticated()}\n                    redirectUrl={'/sign-in'}\n                />\n\n                <ProtectedRoute\n                    exact path=\"/chat/:id\"\n                    component={ChatPage}\n                    condition={this.isUserAuthenticated()}\n                    redirectUrl={'/sign-in'}\n                />\n\n                <ProtectedRoute\n                    exact path=\"/event\"\n                    component={EventsPage}\n                    condition={this.isUserAuthenticated()}\n                    redirectUrl={'/sign-in'}\n                />\n\n                <ProtectedRoute\n                    exact path=\"/event/:id\"\n                    component={EventPage}\n                    condition={this.isUserAuthenticated()}\n                    redirectUrl={'/sign-in'}\n                />\n\n                <ProtectedRoute\n                    exact path=\"/event-create\"\n                    component={EventCreatePage}\n                    condition={this.isUserAuthenticated()}\n                    redirectUrl={'/sign-in'}\n                />\n\n                <ProtectedRoute\n                    exact path=\"/sign-in\"\n                    component={LoginPage}\n                    condition={!this.isUserAuthenticated()}\n                    redirectUrl={'/chat'}\n                />\n\n                <ProtectedRoute\n                    exact path=\"/sign-up\"\n                    component={RegisterPage}\n                    condition={!this.isUserAuthenticated()}\n                    redirectUrl={'/chat'}\n                />\n\n                <ProtectedRoute\n                    exact path=\"/\"\n                    component={ChatsPage}\n                    condition={this.isUserAuthenticated()}\n                    redirectUrl={'/sign-in'}\n                />\n\n\n            </Router>\n        );\n    }\n\n    render() {\n\n        if(this.props.registrationFinished === true) {\n            this.props.connectSocketAction();\n        }\n\n        return (\n            <div className=\"container\">\n                {this.renderBasedOnUserAuthentication()}\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state: any) => {\n    return {\n        isUserLoggedIn: state.users.currentUserAuthenticated,\n        registrationFinished: state.users.current.registration_finished\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\n    return {\n        getCurrentUser: () => dispatch(getCurrentUserAction()),\n        connectSocketAction: () => dispatch(connectSocketAction())\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect sent_at to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import io from 'socket.io-client';\nimport {Message} from \"../../message/models/Message\";\n\n\nexport const IM            = 'IM';\nexport const IDENT         = 'IDENTIFY';\nexport const CONNECT       = 'CONNECT';\nexport const DISCONNECT    = 'DISCONNECT';\nexport const CONNECT_ERR   = 'CONNECT_ERROR';\nexport const RECONNECT_ERR = 'RECONNECT_ERROR';\nexport const UPDATE_CLIENT = 'UPDATE_CLIENT';\n\n\nexport default class Socket {\n    private readonly port: number;\n    user: any;\n\n    private socket: any;\n\n    private readonly onChange: any;\n\n    private readonly onSocketError: any;\n\n    private readonly onMessage: any;\n\n    private readonly onUpdateClient: any;\n\n    constructor(onChange: any, onSocketError: any, onMessage: any, onUpdateClient: any) {\n        this.onChange = onChange;\n        this.onSocketError = onSocketError;\n        this.onMessage = onMessage;\n        this.onUpdateClient = onUpdateClient;\n        this.socket = null;\n\n        this.port = 5000;\n    }\n\n    connect = () => {\n        const host = `http://localhost:${this.port}`;\n        this.socket = io.connect(host);\n\n        this.socket.on(CONNECT, this.onConnected);\n        this.socket.on(DISCONNECT, this.onDisconnected);\n        this.socket.on(CONNECT_ERR, this.onError);\n        this.socket.on(RECONNECT_ERR, this.onError);\n    };\n\n    onConnected = () => {\n        this.sendIdent();\n        this.socket.on(IM, this.onMessage);\n        this.socket.on(UPDATE_CLIENT, this.onUpdateClient);\n        this.onChange(true);\n    };\n\n    onDisconnected = () => this.onChange(false);\n\n    sendIdent = () => this.socket.emit(IDENT, this.user);\n\n    sendIm = (message: Message) => this.socket.emit(IM, message);\n\n    disconnect = () => this.socket.close();\n\n    onError = (message: string)  => {\n        this.onSocketError(message);\n        this.disconnect();\n    };\n\n}\n","import {CONNECT_SOCKET, connectionChangedAction, DISCONNECT_SOCKET} from \"../actions\";\nimport Socket from \"./socket\";\nimport {getMessagesAction, MESSAGE_SEND, messageReceivedAction, messageSentAction} from \"../../message/actions\";\nimport {getActiveUsersList} from \"../../user/actions\";\n\nconst socketMiddleware = (store: any)  => {\n    const onConnectionChange = (isConnected: boolean) => {\n        store.dispatch(connectionChangedAction(isConnected));\n\n        if (isConnected) {\n            store.dispatch(getActiveUsersList());\n            store.dispatch(getMessagesAction());\n        }\n    };\n\n    const onIncomingMessage = (message: any) => {\n        store.dispatch(messageReceivedAction(message));\n    };\n\n    const onSocketError = (status: any) => console.log(\"SOCKET ERROR\" + status);\n\n\n    const onUpdateClient = () => {\n\n    };\n\n    const socket = new Socket(\n        onConnectionChange,\n        onSocketError,\n        onIncomingMessage,\n        onUpdateClient,\n    );\n\n    return (next: any) => (action: any) => {\n        socket.user = store.getState().users.current.id;\n\n        switch (action.type) {\n\n            case CONNECT_SOCKET:\n                socket.connect();\n                break;\n\n            case DISCONNECT_SOCKET:\n                socket.disconnect();\n                break;\n\n            case MESSAGE_SEND:\n                socket.sendIm(action.message);\n                store.dispatch(messageSentAction(action.message));\n                break;\n\n            default:\n                break;\n        }\n\n        return next(action)\n    };\n\n\n};\nexport default socketMiddleware;\n","import {Message} from \"../models/Message\";\nimport {MESSAGE_RECEIVED, MESSAGE_SENT, MESSAGES_GET} from \"../actions\";\n\n\nconst INITIAL_STATE = {\n  messages: { } as { [key: string]: Array<Message> }\n};\n\n\nfunction messageReducer(state = INITIAL_STATE, action: any) {\n  let reduced;\n  switch (action.type)\n  {\n    case MESSAGES_GET:\n      reduced = Object.assign({}, state, {\n        messages: action.messages\n      });\n      break;\n\n    case MESSAGE_SENT:\n      let _messagesToRecipient = state.messages[action.message.target_id];\n\n      if(!_messagesToRecipient){\n        _messagesToRecipient = [];\n      }\n      _messagesToRecipient.push(action.message);\n\n      reduced =\n          {\n            ...state,\n            messages:\n                {\n                  ...state.messages,\n                  [action.message.target_id]: _messagesToRecipient\n                }\n          };\n      break;\n\n    case MESSAGE_RECEIVED:\n      let _messagesFromRecipient = state.messages[action.message.sender_id];\n\n      if(!_messagesFromRecipient){\n        _messagesFromRecipient = [];\n      }\n      _messagesFromRecipient.push(action.message);\n\n      reduced =\n          {\n            ...state,\n            messages:\n                {\n                  ...state.messages,\n                  [action.message.sender_id]: _messagesFromRecipient\n                }\n          };\n      break;\n\n    default:\n      reduced = state;\n  }\n  return reduced;\n}\n\nexport default messageReducer;\n","// ACTIONS\n\n// Initial state\nimport {CONNECTION_CHANGED, PORT_CHANGED} from \"../actions\";\n\nconst INITIAL_STATE = {\n    connected: false,\n    port: 8000\n};\n\n// Socket reducer\nfunction socketReducer(state=INITIAL_STATE, action: any) {\n    let reduced;\n    switch (action.type)\n    {\n        case CONNECTION_CHANGED:\n            reduced = Object.assign({}, state, {\n                connected: action.connected,\n                isError: false\n            });\n            break;\n\n        case PORT_CHANGED:\n            reduced = Object.assign({}, state, {\n                port: action.port\n            });\n            break;\n\n        default:\n            reduced = state;\n    }\n    return reduced;\n}\n\nexport default socketReducer;\n","import {LANGUAGES_GET, LEARNING_GOALS_GET, TOPICS_GET} from \"../actions\";\nimport {Language} from \"../models/Language\";\nimport {Topic} from \"../models/Topic\";\nimport {LearningGoal} from \"../models/LearningGoal\";\n\nconst INITIAL_STATE = {\n    languages: [] as Array<Language>,\n    topics: [] as Array<Topic>,\n    learning_goals: [] as Array<LearningGoal>,\n};\n\nfunction staticReducer(state=INITIAL_STATE, action: any) {\n    let reduced;\n    switch (action.type){\n        case LANGUAGES_GET:\n            reduced = {...state, languages: action.languages};\n            break;\n\n        case TOPICS_GET:\n            reduced = {...state, topics: action.topics};\n            break;\n\n        case LEARNING_GOALS_GET:\n            reduced = {...state, learning_goals: action.learning_goals};\n            break;\n        default:\n            reduced = state;\n            break;\n    }\n    return reduced;\n}\n\nexport default staticReducer;\n","import {EVENT_CREATED, EVENT_GET, EVENTS_GET, EVENTS_USER_CREATED_GET, EVENTS_USER_GOING_GET} from \"../actions\";\n\nimport Event from \"../models/Event\";\n\nconst INITIAL_STATE = {\n    events: [] as Array<Event>,\n    eventsUserGoing: [] as Array<Event>,\n    eventsUserCreated: [] as Array<Event>,\n    eventCreationStatus: {}\n};\n\nfunction eventsReducer(state=INITIAL_STATE, action: any) {\n    let reduced;\n    switch (action.type)\n    {\n        case EVENTS_GET:\n            reduced = {...state, events: action.events};\n            break;\n\n        case EVENT_GET:\n            const events = state.events;\n\n            let index = events.findIndex((e: Event) => e.id === action.event.id);\n            if(index === -1) {\n                reduced = {\n                    ...state,\n                    events: [...state.events, action.event]\n                };\n            }\n            else {\n                events[index] = action.event;\n                reduced = {\n                    ...state,\n                    events: [...events]\n                };\n            }\n            break;\n\n        case EVENTS_USER_GOING_GET:\n            reduced = {...state, eventsUserGoing: action.events};\n            break;\n\n        case EVENTS_USER_CREATED_GET:\n            reduced = {...state, eventsUserCreated: action.events};\n            break;\n\n        case EVENT_CREATED:\n            reduced = {\n                ...state,\n                eventsUserCreated: [...state.eventsUserCreated, action.event],\n                eventsUserGoing: [...state.eventsUserGoing, action.event],\n                eventCreationStatus: {\n                    created: true,\n                    event: action.event\n                }\n            };\n            break;\n\n        default:\n            reduced = state;\n    }\n    return reduced;\n}\n\nexport default eventsReducer;\n","import {createStore, applyMiddleware, compose, combineReducers} from 'redux';\nimport thunk from 'redux-thunk';\nimport socketMiddleware from \"./socket/middlewares\";\nimport messagesReducer from \"./message/reducer\";\nimport socketReducer from \"./socket/reducer\";\nimport userReducer from \"./user/reducer\";\nimport staticReducer from \"./static/reducer\";\nimport eventsReducer from \"./events/reducer\";\n\nconst rootReducer = combineReducers({\n    messages: messagesReducer,\n    socket: socketReducer,\n    users: userReducer,\n    static: staticReducer,\n    events: eventsReducer,\n});\n\n\nexport default function configureStore(initialState={}) {\n    return createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(thunk, socketMiddleware),\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n        )\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from \"./store\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}